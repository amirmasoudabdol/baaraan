{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction \u00b6 Baaraan (Farsi: \u0628\u0627\u0631\u0627\u0646, baran , | b\u00e2r\u00e2n |) is a collection of missing multivariate random number distributions for Modern C++ with STL -like API. For the start, some of the more important and useful distributions are implemented and tested, e.g., Multivariate Normal Distribution, and I am hopping to slowly expand the list of the distributions, and maybe even add some noise functions to the library later on. This website is mainly dedicated to baaraan's API, and some examples. If you are used to the STL's random distributions, baaraan should feels very familiar and easy to use. Head to the API section and browse your way to the documentation of different distributions. Quick Start \u00b6 Please visit the main README page of the project for a quick installation/start guide.","title":"Home"},{"location":"#introduction","text":"Baaraan (Farsi: \u0628\u0627\u0631\u0627\u0646, baran , | b\u00e2r\u00e2n |) is a collection of missing multivariate random number distributions for Modern C++ with STL -like API. For the start, some of the more important and useful distributions are implemented and tested, e.g., Multivariate Normal Distribution, and I am hopping to slowly expand the list of the distributions, and maybe even add some noise functions to the library later on. This website is mainly dedicated to baaraan's API, and some examples. If you are used to the STL's random distributions, baaraan should feels very familiar and easy to use. Head to the API section and browse your way to the documentation of different distributions.","title":"Introduction"},{"location":"#quick-start","text":"Please visit the main README page of the project for a quick installation/start guide.","title":"Quick Start"},{"location":"doxygen/","text":"Classes \u00b6 namespace baaraan class gig_distribution class param_type class inverse_gaussian_distribution class param_type class mv_t_distribution class param_type class mvnorm_distribution Multivariate Normal Distribution. class param_type multivariate normal parameters class rectified_normal_distribution class param_type class truncated_mvnorm_distribution class param_type class truncated_normal_distribution class param_type Updated on 7 May 2021 at 14:20:27 CEST","title":"Classes"},{"location":"doxygen/#classes","text":"namespace baaraan class gig_distribution class param_type class inverse_gaussian_distribution class param_type class mv_t_distribution class param_type class mvnorm_distribution Multivariate Normal Distribution. class param_type multivariate normal parameters class rectified_normal_distribution class param_type class truncated_mvnorm_distribution class param_type class truncated_normal_distribution class param_type Updated on 7 May 2021 at 14:20:27 CEST","title":"Classes"},{"location":"doxygen/Classes/","text":"Classes \u00b6 namespace baaraan class mv_t_distribution Multivariate t-student Random Distribution. class param_type Parameters of the Multivariate t-student Distribution. class mvnorm_distribution Multivariate Normal Random Distribution. class param_type Multivariate Normal Distribution Parameter Type. class rectified_normal_distribution Rectified Normal Distribution. class param_type class truncated_mvnorm_distribution Truncated Normal Distribution. class param_type class truncated_normal_distribution This class describes a truncated normal distribution. class param_type Updated on 2 June 2021 at 11:24:45 CEST","title":"Classes"},{"location":"doxygen/Classes/#classes","text":"namespace baaraan class mv_t_distribution Multivariate t-student Random Distribution. class param_type Parameters of the Multivariate t-student Distribution. class mvnorm_distribution Multivariate Normal Random Distribution. class param_type Multivariate Normal Distribution Parameter Type. class rectified_normal_distribution Rectified Normal Distribution. class param_type class truncated_mvnorm_distribution Truncated Normal Distribution. class param_type class truncated_normal_distribution This class describes a truncated normal distribution. class param_type Updated on 2 June 2021 at 11:24:45 CEST","title":"Classes"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/","text":"baaraan::gig_distribution \u00b6 More... Public Classes \u00b6 Name class param_type Public Types \u00b6 Name typedef RealType result_type Public Functions \u00b6 Name gig_distribution (result_type lambda =1, result_type chi =1, result_type psi =1) gig_distribution (const param_type & p) void reset () template <class URNG > result_type operator() (URNG & g) template <class URNG > result_type operator() (URNG & g, const param_type & p) param_type param () const void param (const param_type & p) result_type lambda () const result_type chi () const result_type psi () const template <class URNG > RealType operator() (URNG & g, const param_type & parm) Friends \u00b6 Name bool operator== (const gig_distribution & x, const gig_distribution & y) bool operator!= (const gig_distribution & x, const gig_distribution & y) std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > & os, const gig_distribution < _RT > & x) std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > & is, gig_distribution < _RT > & x) Detailed Description \u00b6 template < class RealType = double > class baaraan :: gig_distribution ; Public Types Documentation \u00b6 typedef result_type \u00b6 typedef RealType baaraan :: gig_distribution < RealType >:: result_type ; Public Functions Documentation \u00b6 function gig_distribution \u00b6 inline explicit gig_distribution ( result_type lambda = 1 , result_type chi = 1 , result_type psi = 1 ) function gig_distribution \u00b6 inline explicit gig_distribution ( const param_type & p ) function reset \u00b6 inline void reset () function operator() \u00b6 template < class URNG > inline result_type operator ()( URNG & g ) function operator() \u00b6 template < class URNG > result_type operator ()( URNG & g , const param_type & p ) function param \u00b6 inline param_type param () const function param \u00b6 inline void param ( const param_type & p ) function lambda \u00b6 inline result_type lambda () const function chi \u00b6 inline result_type chi () const function psi \u00b6 inline result_type psi () const function operator() \u00b6 template < class URNG > RealType operator ()( URNG & g , const param_type & parm ) Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const gig_distribution & x , const gig_distribution & y ); friend operator!= \u00b6 friend bool operator != ( const gig_distribution & x , const gig_distribution & y ); friend operator<< \u00b6 friend std :: basic_ostream < _CharT , _Traits > & operator << ( std :: basic_ostream < _CharT , _Traits > & os , const gig_distribution < _RT > & x ); friend operator>> \u00b6 friend std :: basic_istream < _CharT , _Traits > & operator >> ( std :: basic_istream < _CharT , _Traits > & is , gig_distribution < _RT > & x ); Updated on 1 June 2021 at 15:34:04 CEST","title":"baaraan::gig_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#baaraangig_distribution","text":"More...","title":"baaraan::gig_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#public-classes","text":"Name class param_type","title":"Public Classes"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#public-types","text":"Name typedef RealType result_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#public-functions","text":"Name gig_distribution (result_type lambda =1, result_type chi =1, result_type psi =1) gig_distribution (const param_type & p) void reset () template <class URNG > result_type operator() (URNG & g) template <class URNG > result_type operator() (URNG & g, const param_type & p) param_type param () const void param (const param_type & p) result_type lambda () const result_type chi () const result_type psi () const template <class URNG > RealType operator() (URNG & g, const param_type & parm)","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#friends","text":"Name bool operator== (const gig_distribution & x, const gig_distribution & y) bool operator!= (const gig_distribution & x, const gig_distribution & y) std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > & os, const gig_distribution < _RT > & x) std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > & is, gig_distribution < _RT > & x)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#detailed-description","text":"template < class RealType = double > class baaraan :: gig_distribution ;","title":"Detailed Description"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#typedef-result_type","text":"typedef RealType baaraan :: gig_distribution < RealType >:: result_type ;","title":"typedef result_type"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-gig_distribution","text":"inline explicit gig_distribution ( result_type lambda = 1 , result_type chi = 1 , result_type psi = 1 )","title":"function gig_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-gig_distribution_1","text":"inline explicit gig_distribution ( const param_type & p )","title":"function gig_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-reset","text":"inline void reset ()","title":"function reset"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-operator","text":"template < class URNG > inline result_type operator ()( URNG & g )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-operator_1","text":"template < class URNG > result_type operator ()( URNG & g , const param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-param","text":"inline param_type param () const","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-param_1","text":"inline void param ( const param_type & p )","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-lambda","text":"inline result_type lambda () const","title":"function lambda"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-chi","text":"inline result_type chi () const","title":"function chi"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-psi","text":"inline result_type psi () const","title":"function psi"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#function-operator_2","text":"template < class URNG > RealType operator ()( URNG & g , const param_type & parm )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#friend-operator","text":"friend bool operator == ( const gig_distribution & x , const gig_distribution & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#friend-operator_1","text":"friend bool operator != ( const gig_distribution & x , const gig_distribution & y );","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#friend-operator_2","text":"friend std :: basic_ostream < _CharT , _Traits > & operator << ( std :: basic_ostream < _CharT , _Traits > & os , const gig_distribution < _RT > & x );","title":"friend operator&lt;&lt;"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution/#friend-operator_3","text":"friend std :: basic_istream < _CharT , _Traits > & operator >> ( std :: basic_istream < _CharT , _Traits > & is , gig_distribution < _RT > & x ); Updated on 1 June 2021 at 15:34:04 CEST","title":"friend operator&gt;&gt;"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/","text":"baaraan::gig_distribution::param_type \u00b6 Public Types \u00b6 Name typedef gig_distribution distribution_type Public Functions \u00b6 Name param_type (result_type lambda =1, result_type chi =1, result_type psi =1) result_type lambda () const result_type chi () const result_type psi () const Friends \u00b6 Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y) Public Types Documentation \u00b6 typedef distribution_type \u00b6 typedef gig_distribution baaraan :: gig_distribution < RealType >:: param_type :: distribution_type ; Public Functions Documentation \u00b6 function param_type \u00b6 inline explicit param_type ( result_type lambda = 1 , result_type chi = 1 , result_type psi = 1 ) function lambda \u00b6 inline result_type lambda () const function chi \u00b6 inline result_type chi () const function psi \u00b6 inline result_type psi () const Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const param_type & x , const param_type & y ); friend operator!= \u00b6 friend bool operator != ( const param_type & x , const param_type & y ); Updated on 1 June 2021 at 15:34:04 CEST","title":"baaraan::gig_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#baaraangig_distributionparam_type","text":"","title":"baaraan::gig_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#public-types","text":"Name typedef gig_distribution distribution_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#public-functions","text":"Name param_type (result_type lambda =1, result_type chi =1, result_type psi =1) result_type lambda () const result_type chi () const result_type psi () const","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#friends","text":"Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#typedef-distribution_type","text":"typedef gig_distribution baaraan :: gig_distribution < RealType >:: param_type :: distribution_type ;","title":"typedef distribution_type"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#function-param_type","text":"inline explicit param_type ( result_type lambda = 1 , result_type chi = 1 , result_type psi = 1 )","title":"function param_type"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#function-lambda","text":"inline result_type lambda () const","title":"function lambda"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#function-chi","text":"inline result_type chi () const","title":"function chi"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#function-psi","text":"inline result_type psi () const","title":"function psi"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#friend-operator","text":"friend bool operator == ( const param_type & x , const param_type & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1gig__distribution_1_1param__type/#friend-operator_1","text":"friend bool operator != ( const param_type & x , const param_type & y ); Updated on 1 June 2021 at 15:34:04 CEST","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/","text":"baaraan::inverse_gaussian_distribution \u00b6 More... Public Classes \u00b6 Name class param_type Public Types \u00b6 Name typedef RealType result_type Public Functions \u00b6 Name inverse_gaussian_distribution (result_type mu =0, result_type lambda =1) inverse_gaussian_distribution (const param_type & p) void reset () template <class URNG > result_type operator() (URNG & g) template <class URNG > result_type operator() (URNG & g, const param_type & p) result_type mu () const result_type lambda () const param_type param () const void param (const param_type & p) result_type min () const result_type max () const template <class URNG > RealType operator() (URNG & g, const param_type & parm) Friends \u00b6 Name bool operator== (const inverse_gaussian_distribution & x, const inverse_gaussian_distribution & y) bool operator!= (const inverse_gaussian_distribution & x, const inverse_gaussian_distribution & y) std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > & os, const inverse_gaussian_distribution < _RT > & x) std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > & is, inverse_gaussian_distribution < _RT > & x) Detailed Description \u00b6 template < class RealType = double > class baaraan :: inverse_gaussian_distribution ; Public Types Documentation \u00b6 typedef result_type \u00b6 typedef RealType baaraan :: inverse_gaussian_distribution < RealType >:: result_type ; Public Functions Documentation \u00b6 function inverse_gaussian_distribution \u00b6 inline explicit inverse_gaussian_distribution ( result_type mu = 0 , result_type lambda = 1 ) function inverse_gaussian_distribution \u00b6 inline explicit inverse_gaussian_distribution ( const param_type & p ) function reset \u00b6 inline void reset () function operator() \u00b6 template < class URNG > inline result_type operator ()( URNG & g ) function operator() \u00b6 template < class URNG > result_type operator ()( URNG & g , const param_type & p ) function mu \u00b6 inline result_type mu () const function lambda \u00b6 inline result_type lambda () const function param \u00b6 inline param_type param () const function param \u00b6 inline void param ( const param_type & p ) function min \u00b6 inline result_type min () const function max \u00b6 inline result_type max () const function operator() \u00b6 template < class URNG > RealType operator ()( URNG & g , const param_type & parm ) Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const inverse_gaussian_distribution & x , const inverse_gaussian_distribution & y ); friend operator!= \u00b6 friend bool operator != ( const inverse_gaussian_distribution & x , const inverse_gaussian_distribution & y ); friend operator<< \u00b6 friend std :: basic_ostream < _CharT , _Traits > & operator << ( std :: basic_ostream < _CharT , _Traits > & os , const inverse_gaussian_distribution < _RT > & x ); friend operator>> \u00b6 friend std :: basic_istream < _CharT , _Traits > & operator >> ( std :: basic_istream < _CharT , _Traits > & is , inverse_gaussian_distribution < _RT > & x ); Updated on 1 June 2021 at 15:34:04 CEST","title":"baaraan::inverse_gaussian_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#baaraaninverse_gaussian_distribution","text":"More...","title":"baaraan::inverse_gaussian_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#public-classes","text":"Name class param_type","title":"Public Classes"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#public-types","text":"Name typedef RealType result_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#public-functions","text":"Name inverse_gaussian_distribution (result_type mu =0, result_type lambda =1) inverse_gaussian_distribution (const param_type & p) void reset () template <class URNG > result_type operator() (URNG & g) template <class URNG > result_type operator() (URNG & g, const param_type & p) result_type mu () const result_type lambda () const param_type param () const void param (const param_type & p) result_type min () const result_type max () const template <class URNG > RealType operator() (URNG & g, const param_type & parm)","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#friends","text":"Name bool operator== (const inverse_gaussian_distribution & x, const inverse_gaussian_distribution & y) bool operator!= (const inverse_gaussian_distribution & x, const inverse_gaussian_distribution & y) std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > & os, const inverse_gaussian_distribution < _RT > & x) std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > & is, inverse_gaussian_distribution < _RT > & x)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#detailed-description","text":"template < class RealType = double > class baaraan :: inverse_gaussian_distribution ;","title":"Detailed Description"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#typedef-result_type","text":"typedef RealType baaraan :: inverse_gaussian_distribution < RealType >:: result_type ;","title":"typedef result_type"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-inverse_gaussian_distribution","text":"inline explicit inverse_gaussian_distribution ( result_type mu = 0 , result_type lambda = 1 )","title":"function inverse_gaussian_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-inverse_gaussian_distribution_1","text":"inline explicit inverse_gaussian_distribution ( const param_type & p )","title":"function inverse_gaussian_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-reset","text":"inline void reset ()","title":"function reset"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-operator","text":"template < class URNG > inline result_type operator ()( URNG & g )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-operator_1","text":"template < class URNG > result_type operator ()( URNG & g , const param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-mu","text":"inline result_type mu () const","title":"function mu"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-lambda","text":"inline result_type lambda () const","title":"function lambda"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-param","text":"inline param_type param () const","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-param_1","text":"inline void param ( const param_type & p )","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-min","text":"inline result_type min () const","title":"function min"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-max","text":"inline result_type max () const","title":"function max"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#function-operator_2","text":"template < class URNG > RealType operator ()( URNG & g , const param_type & parm )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#friend-operator","text":"friend bool operator == ( const inverse_gaussian_distribution & x , const inverse_gaussian_distribution & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#friend-operator_1","text":"friend bool operator != ( const inverse_gaussian_distribution & x , const inverse_gaussian_distribution & y );","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#friend-operator_2","text":"friend std :: basic_ostream < _CharT , _Traits > & operator << ( std :: basic_ostream < _CharT , _Traits > & os , const inverse_gaussian_distribution < _RT > & x );","title":"friend operator&lt;&lt;"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution/#friend-operator_3","text":"friend std :: basic_istream < _CharT , _Traits > & operator >> ( std :: basic_istream < _CharT , _Traits > & is , inverse_gaussian_distribution < _RT > & x ); Updated on 1 June 2021 at 15:34:04 CEST","title":"friend operator&gt;&gt;"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/","text":"baaraan::inverse_gaussian_distribution::param_type \u00b6 Public Types \u00b6 Name typedef inverse_gaussian_distribution distribution_type Public Functions \u00b6 Name param_type (result_type mu =0, result_type lambda =1) result_type mu () const result_type lambda () const Friends \u00b6 Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y) Public Types Documentation \u00b6 typedef distribution_type \u00b6 typedef inverse_gaussian_distribution baaraan :: inverse_gaussian_distribution < RealType >:: param_type :: distribution_type ; Public Functions Documentation \u00b6 function param_type \u00b6 inline explicit param_type ( result_type mu = 0 , result_type lambda = 1 ) function mu \u00b6 inline result_type mu () const function lambda \u00b6 inline result_type lambda () const Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const param_type & x , const param_type & y ); friend operator!= \u00b6 friend bool operator != ( const param_type & x , const param_type & y ); Updated on 1 June 2021 at 15:34:04 CEST","title":"baaraan::inverse_gaussian_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#baaraaninverse_gaussian_distributionparam_type","text":"","title":"baaraan::inverse_gaussian_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#public-types","text":"Name typedef inverse_gaussian_distribution distribution_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#public-functions","text":"Name param_type (result_type mu =0, result_type lambda =1) result_type mu () const result_type lambda () const","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#friends","text":"Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#typedef-distribution_type","text":"typedef inverse_gaussian_distribution baaraan :: inverse_gaussian_distribution < RealType >:: param_type :: distribution_type ;","title":"typedef distribution_type"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#function-param_type","text":"inline explicit param_type ( result_type mu = 0 , result_type lambda = 1 )","title":"function param_type"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#function-mu","text":"inline result_type mu () const","title":"function mu"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#function-lambda","text":"inline result_type lambda () const","title":"function lambda"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#friend-operator","text":"friend bool operator == ( const param_type & x , const param_type & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1inverse__gaussian__distribution_1_1param__type/#friend-operator_1","text":"friend bool operator != ( const param_type & x , const param_type & y ); Updated on 1 June 2021 at 15:34:04 CEST","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/","text":"baaraan::mv_t_distribution \u00b6 Module: Multivariate Random Distributions Multivariate t-student Random Distribution. More... #include <mv_t_distribution.h> Public Classes \u00b6 Name class param_type Parameters of the Multivariate t-student Distribution. Public Types \u00b6 Name typedef arma::Mat< RealType > matrix_type typedef arma::Col< RealType > vector_type Public Functions \u00b6 Name mv_t_distribution (const param_type & p) Constructs an instance of Truncated Multivariate t-student Random Distribution by accepting an instance of mv_t_distribution::param_type . mv_t_distribution (double dof, vector_type means, matrix_type sigma) Constructs an instance of Truncated Multivariate t-student Random Distribution by accepting its underlying parameters. void reset () template <class URNG > vector_type operator() (URNG & g) template <class URNG > vector_type operator() (URNG & g, const param_type & p) double dof () const vector_type means () const vector_type sigma () const param_type param () const void param (const param_type & params) vector_type min () const vector_type max () const template <class URNG > mv_t_distribution < RealType >::vector_type operator() (URNG & g, const mv_t_distribution < RealType >:: param_type & p) Friends \u00b6 Name bool operator== (const mv_t_distribution & x, const mv_t_distribution & y) bool operator!= (const mv_t_distribution & x, const mv_t_distribution & y) std::basic_ostream< charT, traits > & operator<< (std::basic_ostream< charT, traits > & os, const mv_t_distribution & means) std::basic_istream< charT, traits > & operator>> (std::basic_istream< charT, traits > & is, mv_t_distribution & means) Detailed Description \u00b6 template < class RealType = double > class baaraan :: mv_t_distribution ; Multivariate t-student Random Distribution. Template Parameters : RealType Indicates the type of return values Public Types Documentation \u00b6 typedef matrix_type \u00b6 typedef arma :: Mat < RealType > baaraan :: mv_t_distribution < RealType >:: matrix_type ; typedef vector_type \u00b6 typedef arma :: Col < RealType > baaraan :: mv_t_distribution < RealType >:: vector_type ; Public Functions Documentation \u00b6 function mv_t_distribution \u00b6 inline explicit mv_t_distribution ( const param_type & p ) Constructs an instance of Truncated Multivariate t-student Random Distribution by accepting an instance of mv_t_distribution::param_type . Parameters : p function mv_t_distribution \u00b6 inline explicit mv_t_distribution ( double dof , vector_type means , matrix_type sigma ) Constructs an instance of Truncated Multivariate t-student Random Distribution by accepting its underlying parameters. Parameters : dof The degree of freedom of the t-distribution means The means vector sigma The covariance matrix function reset \u00b6 inline void reset () function operator() \u00b6 template < class URNG > inline vector_type operator ()( URNG & g ) function operator() \u00b6 template < class URNG > vector_type operator ()( URNG & g , const param_type & p ) function dof \u00b6 inline double dof () const function means \u00b6 inline vector_type means () const function sigma \u00b6 inline vector_type sigma () const function param \u00b6 inline param_type param () const function param \u00b6 inline void param ( const param_type & params ) function min \u00b6 inline vector_type min () const function max \u00b6 inline vector_type max () const function operator() \u00b6 template < class URNG > mv_t_distribution < RealType >:: vector_type operator ()( URNG & g , const mv_t_distribution < RealType >:: param_type & p ) Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const mv_t_distribution & x , const mv_t_distribution & y ); friend operator!= \u00b6 friend bool operator != ( const mv_t_distribution & x , const mv_t_distribution & y ); friend operator<< \u00b6 friend std :: basic_ostream < charT , traits > & operator << ( std :: basic_ostream < charT , traits > & os , const mv_t_distribution & means ); friend operator>> \u00b6 friend std :: basic_istream < charT , traits > & operator >> ( std :: basic_istream < charT , traits > & is , mv_t_distribution & means ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::mv_t_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#baaraanmv_t_distribution","text":"Module: Multivariate Random Distributions Multivariate t-student Random Distribution. More... #include <mv_t_distribution.h>","title":"baaraan::mv_t_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#public-classes","text":"Name class param_type Parameters of the Multivariate t-student Distribution.","title":"Public Classes"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#public-types","text":"Name typedef arma::Mat< RealType > matrix_type typedef arma::Col< RealType > vector_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#public-functions","text":"Name mv_t_distribution (const param_type & p) Constructs an instance of Truncated Multivariate t-student Random Distribution by accepting an instance of mv_t_distribution::param_type . mv_t_distribution (double dof, vector_type means, matrix_type sigma) Constructs an instance of Truncated Multivariate t-student Random Distribution by accepting its underlying parameters. void reset () template <class URNG > vector_type operator() (URNG & g) template <class URNG > vector_type operator() (URNG & g, const param_type & p) double dof () const vector_type means () const vector_type sigma () const param_type param () const void param (const param_type & params) vector_type min () const vector_type max () const template <class URNG > mv_t_distribution < RealType >::vector_type operator() (URNG & g, const mv_t_distribution < RealType >:: param_type & p)","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#friends","text":"Name bool operator== (const mv_t_distribution & x, const mv_t_distribution & y) bool operator!= (const mv_t_distribution & x, const mv_t_distribution & y) std::basic_ostream< charT, traits > & operator<< (std::basic_ostream< charT, traits > & os, const mv_t_distribution & means) std::basic_istream< charT, traits > & operator>> (std::basic_istream< charT, traits > & is, mv_t_distribution & means)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#detailed-description","text":"template < class RealType = double > class baaraan :: mv_t_distribution ; Multivariate t-student Random Distribution. Template Parameters : RealType Indicates the type of return values","title":"Detailed Description"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#typedef-matrix_type","text":"typedef arma :: Mat < RealType > baaraan :: mv_t_distribution < RealType >:: matrix_type ;","title":"typedef matrix_type"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#typedef-vector_type","text":"typedef arma :: Col < RealType > baaraan :: mv_t_distribution < RealType >:: vector_type ;","title":"typedef vector_type"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-mv_t_distribution","text":"inline explicit mv_t_distribution ( const param_type & p ) Constructs an instance of Truncated Multivariate t-student Random Distribution by accepting an instance of mv_t_distribution::param_type . Parameters : p","title":"function mv_t_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-mv_t_distribution_1","text":"inline explicit mv_t_distribution ( double dof , vector_type means , matrix_type sigma ) Constructs an instance of Truncated Multivariate t-student Random Distribution by accepting its underlying parameters. Parameters : dof The degree of freedom of the t-distribution means The means vector sigma The covariance matrix","title":"function mv_t_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-reset","text":"inline void reset ()","title":"function reset"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-operator","text":"template < class URNG > inline vector_type operator ()( URNG & g )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-operator_1","text":"template < class URNG > vector_type operator ()( URNG & g , const param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-dof","text":"inline double dof () const","title":"function dof"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-means","text":"inline vector_type means () const","title":"function means"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-sigma","text":"inline vector_type sigma () const","title":"function sigma"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-param","text":"inline param_type param () const","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-param_1","text":"inline void param ( const param_type & params )","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-min","text":"inline vector_type min () const","title":"function min"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-max","text":"inline vector_type max () const","title":"function max"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#function-operator_2","text":"template < class URNG > mv_t_distribution < RealType >:: vector_type operator ()( URNG & g , const mv_t_distribution < RealType >:: param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#friend-operator","text":"friend bool operator == ( const mv_t_distribution & x , const mv_t_distribution & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#friend-operator_1","text":"friend bool operator != ( const mv_t_distribution & x , const mv_t_distribution & y );","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#friend-operator_2","text":"friend std :: basic_ostream < charT , traits > & operator << ( std :: basic_ostream < charT , traits > & os , const mv_t_distribution & means );","title":"friend operator&lt;&lt;"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution/#friend-operator_3","text":"friend std :: basic_istream < charT , traits > & operator >> ( std :: basic_istream < charT , traits > & is , mv_t_distribution & means ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator&gt;&gt;"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/","text":"baaraan::mv_t_distribution::param_type \u00b6 Parameters of the Multivariate t-student Distribution. #include <mv_t_distribution.h> Public Types \u00b6 Name typedef mv_t_distribution distribution_type Public Functions \u00b6 Name param_type (double dof, vector_type means, matrix_type sigma) size_t dims () const double dof () const vector_type means () const matrix_type sigma () const Friends \u00b6 Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y) Public Types Documentation \u00b6 typedef distribution_type \u00b6 typedef mv_t_distribution baaraan :: mv_t_distribution < RealType >:: param_type :: distribution_type ; Public Functions Documentation \u00b6 function param_type \u00b6 inline explicit param_type ( double dof , vector_type means , matrix_type sigma ) function dims \u00b6 inline size_t dims () const function dof \u00b6 inline double dof () const function means \u00b6 inline vector_type means () const function sigma \u00b6 inline matrix_type sigma () const Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const param_type & x , const param_type & y ); friend operator!= \u00b6 friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::mv_t_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#baaraanmv_t_distributionparam_type","text":"Parameters of the Multivariate t-student Distribution. #include <mv_t_distribution.h>","title":"baaraan::mv_t_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#public-types","text":"Name typedef mv_t_distribution distribution_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#public-functions","text":"Name param_type (double dof, vector_type means, matrix_type sigma) size_t dims () const double dof () const vector_type means () const matrix_type sigma () const","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#friends","text":"Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#typedef-distribution_type","text":"typedef mv_t_distribution baaraan :: mv_t_distribution < RealType >:: param_type :: distribution_type ;","title":"typedef distribution_type"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#function-param_type","text":"inline explicit param_type ( double dof , vector_type means , matrix_type sigma )","title":"function param_type"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#function-dims","text":"inline size_t dims () const","title":"function dims"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#function-dof","text":"inline double dof () const","title":"function dof"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#function-means","text":"inline vector_type means () const","title":"function means"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#function-sigma","text":"inline matrix_type sigma () const","title":"function sigma"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#friend-operator","text":"friend bool operator == ( const param_type & x , const param_type & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1mv__t__distribution_1_1param__type/#friend-operator_1","text":"friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/","text":"baaraan::mvnorm_distribution \u00b6 Module: Multivariate Random Distributions Multivariate Normal Random Distribution. More... #include <mvnorm_distribution.h> Public Classes \u00b6 Name class param_type Multivariate Normal Distribution Parameter Type. Public Types \u00b6 Name typedef arma::Mat< RealType > matrix_type typedef arma::Col< RealType > vector_type Public Functions \u00b6 Name mvnorm_distribution (const param_type & p) Construct an instance of the multivariate normal random distribution by accepting an instance of mvnorm_distribution::param_type struct. mvnorm_distribution (vector_type means, matrix_type sigma) Constructs an instance of the multivariate normal random distribution by accepting a vector of means, and a covariance matrix. void reset () template <class URNG > vector_type operator() (URNG & g) template <class URNG > vector_type operator() (URNG & g, const param_type & p) template <class URNG > matrix_type operator() (URNG & g, size_t n) template <class URNG > matrix_type operator() (URNG & g, const param_type & p, size_t n) vector_type means () const matrix_type sigma () const param_type param () const void param (const param_type & p) vector_type min () const vector_type max () const template <class URNG > mvnorm_distribution < RealType >::vector_type operator() (URNG & g, const mvnorm_distribution < RealType >:: param_type & p) template <class URNG > mvnorm_distribution < RealType >::matrix_type operator() (URNG & g, const mvnorm_distribution < RealType >:: param_type & p, size_t n) Friends \u00b6 Name bool operator== (const mvnorm_distribution & x, const mvnorm_distribution & y) bool operator!= (const mvnorm_distribution & x, const mvnorm_distribution & y) std::basic_ostream< charT, traits > & operator<< (std::basic_ostream< charT, traits > & os, const mvnorm_distribution & means) std::basic_istream< charT, traits > & operator>> (std::basic_istream< charT, traits > & is, mvnorm_distribution & means) Detailed Description \u00b6 template < class RealType = double > class baaraan :: mvnorm_distribution ; Multivariate Normal Random Distribution. Template Parameters : RealType Indicates the type of return values Implementation of multivariate normal random distribution Public Types Documentation \u00b6 typedef matrix_type \u00b6 typedef arma :: Mat < RealType > baaraan :: mvnorm_distribution < RealType >:: matrix_type ; typedef vector_type \u00b6 typedef arma :: Col < RealType > baaraan :: mvnorm_distribution < RealType >:: vector_type ; Public Functions Documentation \u00b6 function mvnorm_distribution \u00b6 inline explicit mvnorm_distribution ( const param_type & p ) Construct an instance of the multivariate normal random distribution by accepting an instance of mvnorm_distribution::param_type struct. Parameters : p function mvnorm_distribution \u00b6 inline explicit mvnorm_distribution ( vector_type means , matrix_type sigma ) Constructs an instance of the multivariate normal random distribution by accepting a vector of means, and a covariance matrix. Parameters : means The mean vector. sigma The covariance matrix. function reset \u00b6 inline void reset () function operator() \u00b6 template < class URNG > inline vector_type operator ()( URNG & g ) function operator() \u00b6 template < class URNG > vector_type operator ()( URNG & g , const param_type & p ) function operator() \u00b6 template < class URNG > inline matrix_type operator ()( URNG & g , size_t n ) function operator() \u00b6 template < class URNG > matrix_type operator ()( URNG & g , const param_type & p , size_t n ) function means \u00b6 inline vector_type means () const function sigma \u00b6 inline matrix_type sigma () const function param \u00b6 inline param_type param () const function param \u00b6 inline void param ( const param_type & p ) function min \u00b6 inline vector_type min () const function max \u00b6 inline vector_type max () const function operator() \u00b6 template < class URNG > mvnorm_distribution < RealType >:: vector_type operator ()( URNG & g , const mvnorm_distribution < RealType >:: param_type & p ) function operator() \u00b6 template < class URNG > mvnorm_distribution < RealType >:: matrix_type operator ()( URNG & g , const mvnorm_distribution < RealType >:: param_type & p , size_t n ) Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const mvnorm_distribution & x , const mvnorm_distribution & y ); friend operator!= \u00b6 friend bool operator != ( const mvnorm_distribution & x , const mvnorm_distribution & y ); friend operator<< \u00b6 friend std :: basic_ostream < charT , traits > & operator << ( std :: basic_ostream < charT , traits > & os , const mvnorm_distribution & means ); friend operator>> \u00b6 friend std :: basic_istream < charT , traits > & operator >> ( std :: basic_istream < charT , traits > & is , mvnorm_distribution & means ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::mvnorm_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#baaraanmvnorm_distribution","text":"Module: Multivariate Random Distributions Multivariate Normal Random Distribution. More... #include <mvnorm_distribution.h>","title":"baaraan::mvnorm_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#public-classes","text":"Name class param_type Multivariate Normal Distribution Parameter Type.","title":"Public Classes"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#public-types","text":"Name typedef arma::Mat< RealType > matrix_type typedef arma::Col< RealType > vector_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#public-functions","text":"Name mvnorm_distribution (const param_type & p) Construct an instance of the multivariate normal random distribution by accepting an instance of mvnorm_distribution::param_type struct. mvnorm_distribution (vector_type means, matrix_type sigma) Constructs an instance of the multivariate normal random distribution by accepting a vector of means, and a covariance matrix. void reset () template <class URNG > vector_type operator() (URNG & g) template <class URNG > vector_type operator() (URNG & g, const param_type & p) template <class URNG > matrix_type operator() (URNG & g, size_t n) template <class URNG > matrix_type operator() (URNG & g, const param_type & p, size_t n) vector_type means () const matrix_type sigma () const param_type param () const void param (const param_type & p) vector_type min () const vector_type max () const template <class URNG > mvnorm_distribution < RealType >::vector_type operator() (URNG & g, const mvnorm_distribution < RealType >:: param_type & p) template <class URNG > mvnorm_distribution < RealType >::matrix_type operator() (URNG & g, const mvnorm_distribution < RealType >:: param_type & p, size_t n)","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#friends","text":"Name bool operator== (const mvnorm_distribution & x, const mvnorm_distribution & y) bool operator!= (const mvnorm_distribution & x, const mvnorm_distribution & y) std::basic_ostream< charT, traits > & operator<< (std::basic_ostream< charT, traits > & os, const mvnorm_distribution & means) std::basic_istream< charT, traits > & operator>> (std::basic_istream< charT, traits > & is, mvnorm_distribution & means)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#detailed-description","text":"template < class RealType = double > class baaraan :: mvnorm_distribution ; Multivariate Normal Random Distribution. Template Parameters : RealType Indicates the type of return values Implementation of multivariate normal random distribution","title":"Detailed Description"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#typedef-matrix_type","text":"typedef arma :: Mat < RealType > baaraan :: mvnorm_distribution < RealType >:: matrix_type ;","title":"typedef matrix_type"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#typedef-vector_type","text":"typedef arma :: Col < RealType > baaraan :: mvnorm_distribution < RealType >:: vector_type ;","title":"typedef vector_type"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-mvnorm_distribution","text":"inline explicit mvnorm_distribution ( const param_type & p ) Construct an instance of the multivariate normal random distribution by accepting an instance of mvnorm_distribution::param_type struct. Parameters : p","title":"function mvnorm_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-mvnorm_distribution_1","text":"inline explicit mvnorm_distribution ( vector_type means , matrix_type sigma ) Constructs an instance of the multivariate normal random distribution by accepting a vector of means, and a covariance matrix. Parameters : means The mean vector. sigma The covariance matrix.","title":"function mvnorm_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-reset","text":"inline void reset ()","title":"function reset"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-operator","text":"template < class URNG > inline vector_type operator ()( URNG & g )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-operator_1","text":"template < class URNG > vector_type operator ()( URNG & g , const param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-operator_2","text":"template < class URNG > inline matrix_type operator ()( URNG & g , size_t n )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-operator_3","text":"template < class URNG > matrix_type operator ()( URNG & g , const param_type & p , size_t n )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-means","text":"inline vector_type means () const","title":"function means"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-sigma","text":"inline matrix_type sigma () const","title":"function sigma"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-param","text":"inline param_type param () const","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-param_1","text":"inline void param ( const param_type & p )","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-min","text":"inline vector_type min () const","title":"function min"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-max","text":"inline vector_type max () const","title":"function max"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-operator_4","text":"template < class URNG > mvnorm_distribution < RealType >:: vector_type operator ()( URNG & g , const mvnorm_distribution < RealType >:: param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#function-operator_5","text":"template < class URNG > mvnorm_distribution < RealType >:: matrix_type operator ()( URNG & g , const mvnorm_distribution < RealType >:: param_type & p , size_t n )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#friend-operator","text":"friend bool operator == ( const mvnorm_distribution & x , const mvnorm_distribution & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#friend-operator_1","text":"friend bool operator != ( const mvnorm_distribution & x , const mvnorm_distribution & y );","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#friend-operator_2","text":"friend std :: basic_ostream < charT , traits > & operator << ( std :: basic_ostream < charT , traits > & os , const mvnorm_distribution & means );","title":"friend operator&lt;&lt;"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution/#friend-operator_3","text":"friend std :: basic_istream < charT , traits > & operator >> ( std :: basic_istream < charT , traits > & is , mvnorm_distribution & means ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator&gt;&gt;"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/","text":"baaraan::mvnorm_distribution::param_type \u00b6 Multivariate Normal Distribution Parameter Type. #include <mvnorm_distribution.h> Public Types \u00b6 Name typedef mvnorm_distribution distribution_type Public Functions \u00b6 Name param_type (vector_type means, matrix_type sigma) size_t dims () const Returns the dimension of the distribution. vector_type means () const Returns the mean vector of the distribution. matrix_type sigma () const Returns the covariance matrix of the distribution. matrix_type covs_lower () const matrix_type inv_covs () const Friends \u00b6 Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y) Public Types Documentation \u00b6 typedef distribution_type \u00b6 typedef mvnorm_distribution baaraan :: mvnorm_distribution < RealType >:: param_type :: distribution_type ; Public Functions Documentation \u00b6 function param_type \u00b6 inline explicit param_type ( vector_type means , matrix_type sigma ) function dims \u00b6 inline size_t dims () const Returns the dimension of the distribution. function means \u00b6 inline vector_type means () const Returns the mean vector of the distribution. function sigma \u00b6 inline matrix_type sigma () const Returns the covariance matrix of the distribution. function covs_lower \u00b6 inline matrix_type covs_lower () const function inv_covs \u00b6 inline matrix_type inv_covs () const Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const param_type & x , const param_type & y ); friend operator!= \u00b6 friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::mvnorm_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#baaraanmvnorm_distributionparam_type","text":"Multivariate Normal Distribution Parameter Type. #include <mvnorm_distribution.h>","title":"baaraan::mvnorm_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#public-types","text":"Name typedef mvnorm_distribution distribution_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#public-functions","text":"Name param_type (vector_type means, matrix_type sigma) size_t dims () const Returns the dimension of the distribution. vector_type means () const Returns the mean vector of the distribution. matrix_type sigma () const Returns the covariance matrix of the distribution. matrix_type covs_lower () const matrix_type inv_covs () const","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#friends","text":"Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#typedef-distribution_type","text":"typedef mvnorm_distribution baaraan :: mvnorm_distribution < RealType >:: param_type :: distribution_type ;","title":"typedef distribution_type"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#function-param_type","text":"inline explicit param_type ( vector_type means , matrix_type sigma )","title":"function param_type"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#function-dims","text":"inline size_t dims () const Returns the dimension of the distribution.","title":"function dims"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#function-means","text":"inline vector_type means () const Returns the mean vector of the distribution.","title":"function means"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#function-sigma","text":"inline matrix_type sigma () const Returns the covariance matrix of the distribution.","title":"function sigma"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#function-covs_lower","text":"inline matrix_type covs_lower () const","title":"function covs_lower"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#function-inv_covs","text":"inline matrix_type inv_covs () const","title":"function inv_covs"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#friend-operator","text":"friend bool operator == ( const param_type & x , const param_type & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1mvnorm__distribution_1_1param__type/#friend-operator_1","text":"friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/","text":"baaraan::rectified_normal_distribution \u00b6 Module: Univariate Random Distributions Rectified Normal Distribution. More... #include <rectified_normal_distribution.h> Public Classes \u00b6 Name class param_type Public Types \u00b6 Name typedef RealType result_type Public Functions \u00b6 Name rectified_normal_distribution (result_type mean =0, result_type stddev =1) Constructs an instance Rectified Normal Distribution by accepting a mean and standard deviation of the underlying univariate normal distribution. rectified_normal_distribution (const param_type & p) Constructs an instance Rectified Normal Distribution by accepting an instance of rectified_normal_distribution::param_type . void reset () template <class URNG > result_type operator() (URNG & g) template <class URNG > result_type operator() (URNG & g, const param_type & p) result_type mean () const result_type stddev () const param_type param () const void param (const param_type & p) result_type min () const result_type max () const template <class URNG > RealType operator() (URNG & g, const param_type & parm) Friends \u00b6 Name bool operator== (const rectified_normal_distribution & x, const rectified_normal_distribution & y) bool operator!= (const rectified_normal_distribution & x, const rectified_normal_distribution & y) std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > & os, const rectified_normal_distribution < _RT > & x) std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > & is, rectified_normal_distribution < _RT > & x) Detailed Description \u00b6 template < class RealType = double > class baaraan :: rectified_normal_distribution ; Rectified Normal Distribution. Template Parameters : RealType Indicates the type of return values Public Types Documentation \u00b6 typedef result_type \u00b6 typedef RealType baaraan :: rectified_normal_distribution < RealType >:: result_type ; Public Functions Documentation \u00b6 function rectified_normal_distribution \u00b6 inline explicit rectified_normal_distribution ( result_type mean = 0 , result_type stddev = 1 ) Constructs an instance Rectified Normal Distribution by accepting a mean and standard deviation of the underlying univariate normal distribution. Parameters : mean The mean of the normal distribution stddev The stddev of the normal distribution function rectified_normal_distribution \u00b6 inline explicit rectified_normal_distribution ( const param_type & p ) Constructs an instance Rectified Normal Distribution by accepting an instance of rectified_normal_distribution::param_type . Parameters : p function reset \u00b6 inline void reset () function operator() \u00b6 template < class URNG > inline result_type operator ()( URNG & g ) function operator() \u00b6 template < class URNG > result_type operator ()( URNG & g , const param_type & p ) function mean \u00b6 inline result_type mean () const function stddev \u00b6 inline result_type stddev () const function param \u00b6 inline param_type param () const function param \u00b6 inline void param ( const param_type & p ) function min \u00b6 inline result_type min () const function max \u00b6 inline result_type max () const function operator() \u00b6 template < class URNG > RealType operator ()( URNG & g , const param_type & parm ) Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const rectified_normal_distribution & x , const rectified_normal_distribution & y ); friend operator!= \u00b6 friend bool operator != ( const rectified_normal_distribution & x , const rectified_normal_distribution & y ); friend operator<< \u00b6 friend std :: basic_ostream < _CharT , _Traits > & operator << ( std :: basic_ostream < _CharT , _Traits > & os , const rectified_normal_distribution < _RT > & x ); friend operator>> \u00b6 friend std :: basic_istream < _CharT , _Traits > & operator >> ( std :: basic_istream < _CharT , _Traits > & is , rectified_normal_distribution < _RT > & x ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::rectified_normal_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#baaraanrectified_normal_distribution","text":"Module: Univariate Random Distributions Rectified Normal Distribution. More... #include <rectified_normal_distribution.h>","title":"baaraan::rectified_normal_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#public-classes","text":"Name class param_type","title":"Public Classes"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#public-types","text":"Name typedef RealType result_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#public-functions","text":"Name rectified_normal_distribution (result_type mean =0, result_type stddev =1) Constructs an instance Rectified Normal Distribution by accepting a mean and standard deviation of the underlying univariate normal distribution. rectified_normal_distribution (const param_type & p) Constructs an instance Rectified Normal Distribution by accepting an instance of rectified_normal_distribution::param_type . void reset () template <class URNG > result_type operator() (URNG & g) template <class URNG > result_type operator() (URNG & g, const param_type & p) result_type mean () const result_type stddev () const param_type param () const void param (const param_type & p) result_type min () const result_type max () const template <class URNG > RealType operator() (URNG & g, const param_type & parm)","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#friends","text":"Name bool operator== (const rectified_normal_distribution & x, const rectified_normal_distribution & y) bool operator!= (const rectified_normal_distribution & x, const rectified_normal_distribution & y) std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > & os, const rectified_normal_distribution < _RT > & x) std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > & is, rectified_normal_distribution < _RT > & x)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#detailed-description","text":"template < class RealType = double > class baaraan :: rectified_normal_distribution ; Rectified Normal Distribution. Template Parameters : RealType Indicates the type of return values","title":"Detailed Description"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#typedef-result_type","text":"typedef RealType baaraan :: rectified_normal_distribution < RealType >:: result_type ;","title":"typedef result_type"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-rectified_normal_distribution","text":"inline explicit rectified_normal_distribution ( result_type mean = 0 , result_type stddev = 1 ) Constructs an instance Rectified Normal Distribution by accepting a mean and standard deviation of the underlying univariate normal distribution. Parameters : mean The mean of the normal distribution stddev The stddev of the normal distribution","title":"function rectified_normal_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-rectified_normal_distribution_1","text":"inline explicit rectified_normal_distribution ( const param_type & p ) Constructs an instance Rectified Normal Distribution by accepting an instance of rectified_normal_distribution::param_type . Parameters : p","title":"function rectified_normal_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-reset","text":"inline void reset ()","title":"function reset"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-operator","text":"template < class URNG > inline result_type operator ()( URNG & g )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-operator_1","text":"template < class URNG > result_type operator ()( URNG & g , const param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-mean","text":"inline result_type mean () const","title":"function mean"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-stddev","text":"inline result_type stddev () const","title":"function stddev"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-param","text":"inline param_type param () const","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-param_1","text":"inline void param ( const param_type & p )","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-min","text":"inline result_type min () const","title":"function min"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-max","text":"inline result_type max () const","title":"function max"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#function-operator_2","text":"template < class URNG > RealType operator ()( URNG & g , const param_type & parm )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#friend-operator","text":"friend bool operator == ( const rectified_normal_distribution & x , const rectified_normal_distribution & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#friend-operator_1","text":"friend bool operator != ( const rectified_normal_distribution & x , const rectified_normal_distribution & y );","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#friend-operator_2","text":"friend std :: basic_ostream < _CharT , _Traits > & operator << ( std :: basic_ostream < _CharT , _Traits > & os , const rectified_normal_distribution < _RT > & x );","title":"friend operator&lt;&lt;"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution/#friend-operator_3","text":"friend std :: basic_istream < _CharT , _Traits > & operator >> ( std :: basic_istream < _CharT , _Traits > & is , rectified_normal_distribution < _RT > & x ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator&gt;&gt;"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/","text":"baaraan::rectified_normal_distribution::param_type \u00b6 Public Types \u00b6 Name typedef rectified_normal_distribution distribution_type Public Functions \u00b6 Name param_type (result_type mean =0, result_type stddev =1) result_type mean () const result_type stddev () const Friends \u00b6 Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y) Public Types Documentation \u00b6 typedef distribution_type \u00b6 typedef rectified_normal_distribution baaraan :: rectified_normal_distribution < RealType >:: param_type :: distribution_type ; Public Functions Documentation \u00b6 function param_type \u00b6 inline explicit param_type ( result_type mean = 0 , result_type stddev = 1 ) function mean \u00b6 inline result_type mean () const function stddev \u00b6 inline result_type stddev () const Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const param_type & x , const param_type & y ); friend operator!= \u00b6 friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::rectified_normal_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#baaraanrectified_normal_distributionparam_type","text":"","title":"baaraan::rectified_normal_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#public-types","text":"Name typedef rectified_normal_distribution distribution_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#public-functions","text":"Name param_type (result_type mean =0, result_type stddev =1) result_type mean () const result_type stddev () const","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#friends","text":"Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#typedef-distribution_type","text":"typedef rectified_normal_distribution baaraan :: rectified_normal_distribution < RealType >:: param_type :: distribution_type ;","title":"typedef distribution_type"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#function-param_type","text":"inline explicit param_type ( result_type mean = 0 , result_type stddev = 1 )","title":"function param_type"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#function-mean","text":"inline result_type mean () const","title":"function mean"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#function-stddev","text":"inline result_type stddev () const","title":"function stddev"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#friend-operator","text":"friend bool operator == ( const param_type & x , const param_type & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1rectified__normal__distribution_1_1param__type/#friend-operator_1","text":"friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/","text":"baaraan::truncated_mvnorm_distribution \u00b6 Module: Truncated Random Distributions Truncated Normal Distribution. More... #include <truncated_mvnorm_distribution.h> Public Classes \u00b6 Name class param_type Public Types \u00b6 Name typedef arma::Col< RealType > vector_type typedef arma::Mat< RealType > matrix_type Public Functions \u00b6 Name truncated_mvnorm_distribution (vector_type means, matrix_type sigma, vector_type lowers, vector_type uppers) Constructs an instance of the truncated multivariate normal random distribution by accepting its individual parameters. truncated_mvnorm_distribution (const param_type & p) Constructs an instance of the truncated multivariate normal random distribution by accepting an initialized truncated_mvnorm_distribution::param_type . void reset () template <class URNG > vector_type operator() (URNG & g) template <class URNG > vector_type operator() (URNG & g, const param_type & p) vector_type means () const matrix_type sigma () const param_type param () const void param (const param_type & params) vector_type lowers () const vector_type min () const vector_type uppers () const vector_type max () const template <class _URNG > truncated_mvnorm_distribution < RealType >::vector_type operator() (_URNG & g, const truncated_mvnorm_distribution < RealType >:: param_type & p) Friends \u00b6 Name bool operator== (const truncated_mvnorm_distribution & x, const truncated_mvnorm_distribution & y) bool operator!= (const truncated_mvnorm_distribution & x, const truncated_mvnorm_distribution & y) std::basic_ostream< charT, traits > & operator<< (std::basic_ostream< charT, traits > & os, const truncated_mvnorm_distribution & means) std::basic_istream< charT, traits > & operator>> (std::basic_istream< charT, traits > & is, truncated_mvnorm_distribution & means) Detailed Description \u00b6 template < class RealType = double > class baaraan :: truncated_mvnorm_distribution ; Truncated Normal Distribution. Template Parameters : RealType Indicates the type of return values Public Types Documentation \u00b6 typedef vector_type \u00b6 typedef arma :: Col < RealType > baaraan :: truncated_mvnorm_distribution < RealType >:: vector_type ; typedef matrix_type \u00b6 typedef arma :: Mat < RealType > baaraan :: truncated_mvnorm_distribution < RealType >:: matrix_type ; Public Functions Documentation \u00b6 function truncated_mvnorm_distribution \u00b6 inline explicit truncated_mvnorm_distribution ( vector_type means , matrix_type sigma , vector_type lowers , vector_type uppers ) Constructs an instance of the truncated multivariate normal random distribution by accepting its individual parameters. Parameters : means The mean vector sigma The covariance matrix lowers The vector of values indicating lower truncation bound uppers The vector of values indicating upper truncation bound function truncated_mvnorm_distribution \u00b6 inline explicit truncated_mvnorm_distribution ( const param_type & p ) Constructs an instance of the truncated multivariate normal random distribution by accepting an initialized truncated_mvnorm_distribution::param_type . Parameters : p function reset \u00b6 inline void reset () function operator() \u00b6 template < class URNG > inline vector_type operator ()( URNG & g ) function operator() \u00b6 template < class URNG > vector_type operator ()( URNG & g , const param_type & p ) function means \u00b6 inline vector_type means () const function sigma \u00b6 inline matrix_type sigma () const function param \u00b6 inline param_type param () const function param \u00b6 inline void param ( const param_type & params ) function lowers \u00b6 inline vector_type lowers () const function min \u00b6 inline vector_type min () const function uppers \u00b6 inline vector_type uppers () const function max \u00b6 inline vector_type max () const function operator() \u00b6 template < class _URNG > truncated_mvnorm_distribution < RealType >:: vector_type operator ()( _URNG & g , const truncated_mvnorm_distribution < RealType >:: param_type & p ) Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const truncated_mvnorm_distribution & x , const truncated_mvnorm_distribution & y ); friend operator!= \u00b6 friend bool operator != ( const truncated_mvnorm_distribution & x , const truncated_mvnorm_distribution & y ); friend operator<< \u00b6 friend std :: basic_ostream < charT , traits > & operator << ( std :: basic_ostream < charT , traits > & os , const truncated_mvnorm_distribution & means ); friend operator>> \u00b6 friend std :: basic_istream < charT , traits > & operator >> ( std :: basic_istream < charT , traits > & is , truncated_mvnorm_distribution & means ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::truncated_mvnorm_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#baaraantruncated_mvnorm_distribution","text":"Module: Truncated Random Distributions Truncated Normal Distribution. More... #include <truncated_mvnorm_distribution.h>","title":"baaraan::truncated_mvnorm_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#public-classes","text":"Name class param_type","title":"Public Classes"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#public-types","text":"Name typedef arma::Col< RealType > vector_type typedef arma::Mat< RealType > matrix_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#public-functions","text":"Name truncated_mvnorm_distribution (vector_type means, matrix_type sigma, vector_type lowers, vector_type uppers) Constructs an instance of the truncated multivariate normal random distribution by accepting its individual parameters. truncated_mvnorm_distribution (const param_type & p) Constructs an instance of the truncated multivariate normal random distribution by accepting an initialized truncated_mvnorm_distribution::param_type . void reset () template <class URNG > vector_type operator() (URNG & g) template <class URNG > vector_type operator() (URNG & g, const param_type & p) vector_type means () const matrix_type sigma () const param_type param () const void param (const param_type & params) vector_type lowers () const vector_type min () const vector_type uppers () const vector_type max () const template <class _URNG > truncated_mvnorm_distribution < RealType >::vector_type operator() (_URNG & g, const truncated_mvnorm_distribution < RealType >:: param_type & p)","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#friends","text":"Name bool operator== (const truncated_mvnorm_distribution & x, const truncated_mvnorm_distribution & y) bool operator!= (const truncated_mvnorm_distribution & x, const truncated_mvnorm_distribution & y) std::basic_ostream< charT, traits > & operator<< (std::basic_ostream< charT, traits > & os, const truncated_mvnorm_distribution & means) std::basic_istream< charT, traits > & operator>> (std::basic_istream< charT, traits > & is, truncated_mvnorm_distribution & means)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#detailed-description","text":"template < class RealType = double > class baaraan :: truncated_mvnorm_distribution ; Truncated Normal Distribution. Template Parameters : RealType Indicates the type of return values","title":"Detailed Description"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#typedef-vector_type","text":"typedef arma :: Col < RealType > baaraan :: truncated_mvnorm_distribution < RealType >:: vector_type ;","title":"typedef vector_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#typedef-matrix_type","text":"typedef arma :: Mat < RealType > baaraan :: truncated_mvnorm_distribution < RealType >:: matrix_type ;","title":"typedef matrix_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-truncated_mvnorm_distribution","text":"inline explicit truncated_mvnorm_distribution ( vector_type means , matrix_type sigma , vector_type lowers , vector_type uppers ) Constructs an instance of the truncated multivariate normal random distribution by accepting its individual parameters. Parameters : means The mean vector sigma The covariance matrix lowers The vector of values indicating lower truncation bound uppers The vector of values indicating upper truncation bound","title":"function truncated_mvnorm_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-truncated_mvnorm_distribution_1","text":"inline explicit truncated_mvnorm_distribution ( const param_type & p ) Constructs an instance of the truncated multivariate normal random distribution by accepting an initialized truncated_mvnorm_distribution::param_type . Parameters : p","title":"function truncated_mvnorm_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-reset","text":"inline void reset ()","title":"function reset"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-operator","text":"template < class URNG > inline vector_type operator ()( URNG & g )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-operator_1","text":"template < class URNG > vector_type operator ()( URNG & g , const param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-means","text":"inline vector_type means () const","title":"function means"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-sigma","text":"inline matrix_type sigma () const","title":"function sigma"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-param","text":"inline param_type param () const","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-param_1","text":"inline void param ( const param_type & params )","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-lowers","text":"inline vector_type lowers () const","title":"function lowers"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-min","text":"inline vector_type min () const","title":"function min"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-uppers","text":"inline vector_type uppers () const","title":"function uppers"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-max","text":"inline vector_type max () const","title":"function max"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#function-operator_2","text":"template < class _URNG > truncated_mvnorm_distribution < RealType >:: vector_type operator ()( _URNG & g , const truncated_mvnorm_distribution < RealType >:: param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#friend-operator","text":"friend bool operator == ( const truncated_mvnorm_distribution & x , const truncated_mvnorm_distribution & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#friend-operator_1","text":"friend bool operator != ( const truncated_mvnorm_distribution & x , const truncated_mvnorm_distribution & y );","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#friend-operator_2","text":"friend std :: basic_ostream < charT , traits > & operator << ( std :: basic_ostream < charT , traits > & os , const truncated_mvnorm_distribution & means );","title":"friend operator&lt;&lt;"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution/#friend-operator_3","text":"friend std :: basic_istream < charT , traits > & operator >> ( std :: basic_istream < charT , traits > & is , truncated_mvnorm_distribution & means ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator&gt;&gt;"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/","text":"baaraan::truncated_mvnorm_distribution::param_type \u00b6 Public Types \u00b6 Name typedef truncated_mvnorm_distribution distribution_type Public Functions \u00b6 Name param_type (vector_type means, matrix_type sigma, vector_type lowers, vector_type uppers) size_t dims () const vector_type means () const matrix_type sigma () const vector_type lowers () const vector_type uppers () const Friends \u00b6 Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y) Public Types Documentation \u00b6 typedef distribution_type \u00b6 typedef truncated_mvnorm_distribution baaraan :: truncated_mvnorm_distribution < RealType >:: param_type :: distribution_type ; Public Functions Documentation \u00b6 function param_type \u00b6 inline explicit param_type ( vector_type means , matrix_type sigma , vector_type lowers , vector_type uppers ) function dims \u00b6 inline size_t dims () const function means \u00b6 inline vector_type means () const function sigma \u00b6 inline matrix_type sigma () const function lowers \u00b6 inline vector_type lowers () const function uppers \u00b6 inline vector_type uppers () const Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const param_type & x , const param_type & y ); friend operator!= \u00b6 friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::truncated_mvnorm_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#baaraantruncated_mvnorm_distributionparam_type","text":"","title":"baaraan::truncated_mvnorm_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#public-types","text":"Name typedef truncated_mvnorm_distribution distribution_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#public-functions","text":"Name param_type (vector_type means, matrix_type sigma, vector_type lowers, vector_type uppers) size_t dims () const vector_type means () const matrix_type sigma () const vector_type lowers () const vector_type uppers () const","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#friends","text":"Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#typedef-distribution_type","text":"typedef truncated_mvnorm_distribution baaraan :: truncated_mvnorm_distribution < RealType >:: param_type :: distribution_type ;","title":"typedef distribution_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#function-param_type","text":"inline explicit param_type ( vector_type means , matrix_type sigma , vector_type lowers , vector_type uppers )","title":"function param_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#function-dims","text":"inline size_t dims () const","title":"function dims"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#function-means","text":"inline vector_type means () const","title":"function means"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#function-sigma","text":"inline matrix_type sigma () const","title":"function sigma"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#function-lowers","text":"inline vector_type lowers () const","title":"function lowers"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#function-uppers","text":"inline vector_type uppers () const","title":"function uppers"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#friend-operator","text":"friend bool operator == ( const param_type & x , const param_type & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1truncated__mvnorm__distribution_1_1param__type/#friend-operator_1","text":"friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/","text":"baaraan::truncated_normal_distribution \u00b6 Module: Univariate Random Distributions This class describes a truncated normal distribution. More... #include <truncated_normal_distribution.h> Public Classes \u00b6 Name class param_type Public Types \u00b6 Name typedef RealType result_type Public Functions \u00b6 Name truncated_normal_distribution (result_type mean =0, result_type stddev =1, result_type lower =-4, result_type upper =4) Constructs a Truncated Normal Distribution by accpting its underlying parameters. truncated_normal_distribution (const param_type & p) Constructs a Truncated Normal Distribution by accpting an instance of truncated_normal_distribution::param_type . void reset () template <class URNG > result_type operator() (URNG & g) template <class URNG > result_type operator() (URNG & g, const param_type & p) result_type mean () const result_type stddev () const param_type param () const void param (const param_type & p) result_type min () const result_type max () const template <class URNG > RealType operator() (URNG & g, const param_type & parm) Friends \u00b6 Name bool operator== (const truncated_normal_distribution & x, const truncated_normal_distribution & y) bool operator!= (const truncated_normal_distribution & x, const truncated_normal_distribution & y) std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > & os, const truncated_normal_distribution < _RT > & x) std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > & is, truncated_normal_distribution < _RT > & x) Detailed Description \u00b6 template < class RealType = double > class baaraan :: truncated_normal_distribution ; This class describes a truncated normal distribution. Template Parameters : RealType Indicates the type of return values Public Types Documentation \u00b6 typedef result_type \u00b6 typedef RealType baaraan :: truncated_normal_distribution < RealType >:: result_type ; Public Functions Documentation \u00b6 function truncated_normal_distribution \u00b6 inline explicit truncated_normal_distribution ( result_type mean = 0 , result_type stddev = 1 , result_type lower = -4 , result_type upper = 4 ) Constructs a Truncated Normal Distribution by accpting its underlying parameters. Parameters : mean The mean value stddev The standard deviation value lower The lower truncation bound upper The upper truncation bound function truncated_normal_distribution \u00b6 inline explicit truncated_normal_distribution ( const param_type & p ) Constructs a Truncated Normal Distribution by accpting an instance of truncated_normal_distribution::param_type . Parameters : p function reset \u00b6 inline void reset () function operator() \u00b6 template < class URNG > inline result_type operator ()( URNG & g ) function operator() \u00b6 template < class URNG > result_type operator ()( URNG & g , const param_type & p ) function mean \u00b6 inline result_type mean () const function stddev \u00b6 inline result_type stddev () const function param \u00b6 inline param_type param () const function param \u00b6 inline void param ( const param_type & p ) function min \u00b6 inline result_type min () const function max \u00b6 inline result_type max () const function operator() \u00b6 template < class URNG > RealType operator ()( URNG & g , const param_type & parm ) Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const truncated_normal_distribution & x , const truncated_normal_distribution & y ); friend operator!= \u00b6 friend bool operator != ( const truncated_normal_distribution & x , const truncated_normal_distribution & y ); friend operator<< \u00b6 friend std :: basic_ostream < _CharT , _Traits > & operator << ( std :: basic_ostream < _CharT , _Traits > & os , const truncated_normal_distribution < _RT > & x ); friend operator>> \u00b6 friend std :: basic_istream < _CharT , _Traits > & operator >> ( std :: basic_istream < _CharT , _Traits > & is , truncated_normal_distribution < _RT > & x ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::truncated_normal_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#baaraantruncated_normal_distribution","text":"Module: Univariate Random Distributions This class describes a truncated normal distribution. More... #include <truncated_normal_distribution.h>","title":"baaraan::truncated_normal_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#public-classes","text":"Name class param_type","title":"Public Classes"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#public-types","text":"Name typedef RealType result_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#public-functions","text":"Name truncated_normal_distribution (result_type mean =0, result_type stddev =1, result_type lower =-4, result_type upper =4) Constructs a Truncated Normal Distribution by accpting its underlying parameters. truncated_normal_distribution (const param_type & p) Constructs a Truncated Normal Distribution by accpting an instance of truncated_normal_distribution::param_type . void reset () template <class URNG > result_type operator() (URNG & g) template <class URNG > result_type operator() (URNG & g, const param_type & p) result_type mean () const result_type stddev () const param_type param () const void param (const param_type & p) result_type min () const result_type max () const template <class URNG > RealType operator() (URNG & g, const param_type & parm)","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#friends","text":"Name bool operator== (const truncated_normal_distribution & x, const truncated_normal_distribution & y) bool operator!= (const truncated_normal_distribution & x, const truncated_normal_distribution & y) std::basic_ostream< _CharT, _Traits > & operator<< (std::basic_ostream< _CharT, _Traits > & os, const truncated_normal_distribution < _RT > & x) std::basic_istream< _CharT, _Traits > & operator>> (std::basic_istream< _CharT, _Traits > & is, truncated_normal_distribution < _RT > & x)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#detailed-description","text":"template < class RealType = double > class baaraan :: truncated_normal_distribution ; This class describes a truncated normal distribution. Template Parameters : RealType Indicates the type of return values","title":"Detailed Description"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#typedef-result_type","text":"typedef RealType baaraan :: truncated_normal_distribution < RealType >:: result_type ;","title":"typedef result_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-truncated_normal_distribution","text":"inline explicit truncated_normal_distribution ( result_type mean = 0 , result_type stddev = 1 , result_type lower = -4 , result_type upper = 4 ) Constructs a Truncated Normal Distribution by accpting its underlying parameters. Parameters : mean The mean value stddev The standard deviation value lower The lower truncation bound upper The upper truncation bound","title":"function truncated_normal_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-truncated_normal_distribution_1","text":"inline explicit truncated_normal_distribution ( const param_type & p ) Constructs a Truncated Normal Distribution by accpting an instance of truncated_normal_distribution::param_type . Parameters : p","title":"function truncated_normal_distribution"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-reset","text":"inline void reset ()","title":"function reset"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-operator","text":"template < class URNG > inline result_type operator ()( URNG & g )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-operator_1","text":"template < class URNG > result_type operator ()( URNG & g , const param_type & p )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-mean","text":"inline result_type mean () const","title":"function mean"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-stddev","text":"inline result_type stddev () const","title":"function stddev"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-param","text":"inline param_type param () const","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-param_1","text":"inline void param ( const param_type & p )","title":"function param"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-min","text":"inline result_type min () const","title":"function min"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-max","text":"inline result_type max () const","title":"function max"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#function-operator_2","text":"template < class URNG > RealType operator ()( URNG & g , const param_type & parm )","title":"function operator()"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#friend-operator","text":"friend bool operator == ( const truncated_normal_distribution & x , const truncated_normal_distribution & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#friend-operator_1","text":"friend bool operator != ( const truncated_normal_distribution & x , const truncated_normal_distribution & y );","title":"friend operator!="},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#friend-operator_2","text":"friend std :: basic_ostream < _CharT , _Traits > & operator << ( std :: basic_ostream < _CharT , _Traits > & os , const truncated_normal_distribution < _RT > & x );","title":"friend operator&lt;&lt;"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution/#friend-operator_3","text":"friend std :: basic_istream < _CharT , _Traits > & operator >> ( std :: basic_istream < _CharT , _Traits > & is , truncated_normal_distribution < _RT > & x ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator&gt;&gt;"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/","text":"baaraan::truncated_normal_distribution::param_type \u00b6 Public Types \u00b6 Name typedef truncated_normal_distribution distribution_type Public Functions \u00b6 Name param_type (result_type mean =0, result_type stddev =1, result_type lower =-3, result_type upper =3) result_type mean () const result_type stddev () const result_type lower () const result_type upper () const Friends \u00b6 Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y) Public Types Documentation \u00b6 typedef distribution_type \u00b6 typedef truncated_normal_distribution baaraan :: truncated_normal_distribution < RealType >:: param_type :: distribution_type ; Public Functions Documentation \u00b6 function param_type \u00b6 inline explicit param_type ( result_type mean = 0 , result_type stddev = 1 , result_type lower = -3 , result_type upper = 3 ) function mean \u00b6 inline result_type mean () const function stddev \u00b6 inline result_type stddev () const function lower \u00b6 inline result_type lower () const function upper \u00b6 inline result_type upper () const Friends \u00b6 friend operator== \u00b6 friend bool operator == ( const param_type & x , const param_type & y ); friend operator!= \u00b6 friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan::truncated_normal_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#baaraantruncated_normal_distributionparam_type","text":"","title":"baaraan::truncated_normal_distribution::param_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#public-types","text":"Name typedef truncated_normal_distribution distribution_type","title":"Public Types"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#public-functions","text":"Name param_type (result_type mean =0, result_type stddev =1, result_type lower =-3, result_type upper =3) result_type mean () const result_type stddev () const result_type lower () const result_type upper () const","title":"Public Functions"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#friends","text":"Name bool operator== (const param_type & x, const param_type & y) bool operator!= (const param_type & x, const param_type & y)","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#public-types-documentation","text":"","title":"Public Types Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#typedef-distribution_type","text":"typedef truncated_normal_distribution baaraan :: truncated_normal_distribution < RealType >:: param_type :: distribution_type ;","title":"typedef distribution_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#function-param_type","text":"inline explicit param_type ( result_type mean = 0 , result_type stddev = 1 , result_type lower = -3 , result_type upper = 3 )","title":"function param_type"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#function-mean","text":"inline result_type mean () const","title":"function mean"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#function-stddev","text":"inline result_type stddev () const","title":"function stddev"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#function-lower","text":"inline result_type lower () const","title":"function lower"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#function-upper","text":"inline result_type upper () const","title":"function upper"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#friends_1","text":"","title":"Friends"},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#friend-operator","text":"friend bool operator == ( const param_type & x , const param_type & y );","title":"friend operator=="},{"location":"doxygen/Classes/classbaaraan_1_1truncated__normal__distribution_1_1param__type/#friend-operator_1","text":"friend bool operator != ( const param_type & x , const param_type & y ); Updated on 2 June 2021 at 11:24:45 CEST","title":"friend operator!="},{"location":"doxygen/Modules/","text":"Modules \u00b6 group Multivariate Random Distributions List of supported multivariate random distributions. group Rectified Random Distributions List of available rectified random distributions. group Truncated Random Distributions List of truncated random distributions. group Univariate Random Distributions List of available univariate random distributions. Updated on 2 June 2021 at 11:24:45 CEST","title":"Modules"},{"location":"doxygen/Modules/#modules","text":"group Multivariate Random Distributions List of supported multivariate random distributions. group Rectified Random Distributions List of available rectified random distributions. group Truncated Random Distributions List of truncated random distributions. group Univariate Random Distributions List of available univariate random distributions. Updated on 2 June 2021 at 11:24:45 CEST","title":"Modules"},{"location":"doxygen/Modules/group___multivariate_distribution/","text":"Multivariate Random Distributions \u00b6 List of supported multivariate random distributions. ## Classes Name class baaraan::mv_t_distribution Multivariate t-student Random Distribution. class baaraan::mvnorm_distribution Multivariate Normal Random Distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"Multivariate Random Distributions"},{"location":"doxygen/Modules/group___multivariate_distribution/#multivariate-random-distributions","text":"List of supported multivariate random distributions. ## Classes Name class baaraan::mv_t_distribution Multivariate t-student Random Distribution. class baaraan::mvnorm_distribution Multivariate Normal Random Distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"Multivariate Random Distributions"},{"location":"doxygen/Modules/group___rectified_distributions/","text":"Rectified Random Distributions \u00b6 List of available rectified random distributions. ## Classes Name class baaraan::rectified_normal_distribution Rectified Normal Distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"Rectified Random Distributions"},{"location":"doxygen/Modules/group___rectified_distributions/#rectified-random-distributions","text":"List of available rectified random distributions. ## Classes Name class baaraan::rectified_normal_distribution Rectified Normal Distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"Rectified Random Distributions"},{"location":"doxygen/Modules/group___truncated_distributions/","text":"Truncated Random Distributions \u00b6 List of truncated random distributions. ## Classes Name class baaraan::truncated_mvnorm_distribution Truncated Normal Distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"Truncated Random Distributions"},{"location":"doxygen/Modules/group___truncated_distributions/#truncated-random-distributions","text":"List of truncated random distributions. ## Classes Name class baaraan::truncated_mvnorm_distribution Truncated Normal Distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"Truncated Random Distributions"},{"location":"doxygen/Modules/group___univariate_distributions/","text":"Univariate Random Distributions \u00b6 List of available univariate random distributions. ## Classes Name class baaraan::rectified_normal_distribution Rectified Normal Distribution. class baaraan::truncated_normal_distribution This class describes a truncated normal distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"Univariate Random Distributions"},{"location":"doxygen/Modules/group___univariate_distributions/#univariate-random-distributions","text":"List of available univariate random distributions. ## Classes Name class baaraan::rectified_normal_distribution Rectified Normal Distribution. class baaraan::truncated_normal_distribution This class describes a truncated normal distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"Univariate Random Distributions"},{"location":"doxygen/Namespaces/","text":"Namespaces \u00b6 namespace baaraan Updated on 2 June 2021 at 11:24:45 CEST","title":"Namespaces"},{"location":"doxygen/Namespaces/#namespaces","text":"namespace baaraan Updated on 2 June 2021 at 11:24:45 CEST","title":"Namespaces"},{"location":"doxygen/Namespaces/namespacebaaraan/","text":"baaraan \u00b6 Classes \u00b6 Name class baaraan::mv_t_distribution Multivariate t-student Random Distribution. class baaraan::mvnorm_distribution Multivariate Normal Random Distribution. class baaraan::rectified_normal_distribution Rectified Normal Distribution. class baaraan::truncated_mvnorm_distribution Truncated Normal Distribution. class baaraan::truncated_normal_distribution This class describes a truncated normal distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"baaraan"},{"location":"doxygen/Namespaces/namespacebaaraan/#baaraan","text":"","title":"baaraan"},{"location":"doxygen/Namespaces/namespacebaaraan/#classes","text":"Name class baaraan::mv_t_distribution Multivariate t-student Random Distribution. class baaraan::mvnorm_distribution Multivariate Normal Random Distribution. class baaraan::rectified_normal_distribution Rectified Normal Distribution. class baaraan::truncated_mvnorm_distribution Truncated Normal Distribution. class baaraan::truncated_normal_distribution This class describes a truncated normal distribution. Updated on 2 June 2021 at 11:24:45 CEST","title":"Classes"}]}